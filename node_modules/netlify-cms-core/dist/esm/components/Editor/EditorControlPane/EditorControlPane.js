"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _styledBase = _interopRequireDefault(require("@emotion/styled-base"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactImmutableProptypes = _interopRequireDefault(require("react-immutable-proptypes"));

var _core = require("@emotion/core");

var _netlifyCmsUiDefault = require("netlify-cms-ui-default");

var _EditorControl = _interopRequireDefault(require("./EditorControl"));

var _i18n = require("../../../lib/i18n");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }

const ControlPaneContainer = (0, _styledBase.default)("div", {
  target: "e1tnasa20",
  label: "ControlPaneContainer"
})(process.env.NODE_ENV === "production" ? {
  name: "78woh1",
  styles: "max-width:800px;margin:0 auto;padding-bottom:16px;font-size:16px;"
} : {
  name: "78woh1",
  styles: "max-width:800px;margin:0 auto;padding-bottom:16px;font-size:16px;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0VkaXRvci9FZGl0b3JDb250cm9sUGFuZS9FZGl0b3JDb250cm9sUGFuZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUF3QnVDIiwiZmlsZSI6Ii4uLy4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0VkaXRvci9FZGl0b3JDb250cm9sUGFuZS9FZGl0b3JDb250cm9sUGFuZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IEltbXV0YWJsZVByb3BUeXBlcyBmcm9tICdyZWFjdC1pbW11dGFibGUtcHJvcHR5cGVzJztcbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL2NvcmUnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHtcbiAgY29sb3JzLFxuICBEcm9wZG93bixcbiAgRHJvcGRvd25JdGVtLFxuICBTdHlsZWREcm9wZG93bkJ1dHRvbixcbiAgYnV0dG9ucyxcbiAgdGV4dCxcbn0gZnJvbSAnbmV0bGlmeS1jbXMtdWktZGVmYXVsdCc7XG5cbmltcG9ydCBFZGl0b3JDb250cm9sIGZyb20gJy4vRWRpdG9yQ29udHJvbCc7XG5pbXBvcnQge1xuICBnZXRJMThuSW5mbyxcbiAgaXNGaWVsZFRyYW5zbGF0YWJsZSxcbiAgaXNGaWVsZER1cGxpY2F0ZSxcbiAgaXNGaWVsZEhpZGRlbixcbiAgZ2V0TG9jYWxlRGF0YVBhdGgsXG4gIGhhc0kxOG4sXG59IGZyb20gJy4uLy4uLy4uL2xpYi9pMThuJztcblxuY29uc3QgQ29udHJvbFBhbmVDb250YWluZXIgPSBzdHlsZWQuZGl2YFxuICBtYXgtd2lkdGg6IDgwMHB4O1xuICBtYXJnaW46IDAgYXV0bztcbiAgcGFkZGluZy1ib3R0b206IDE2cHg7XG4gIGZvbnQtc2l6ZTogMTZweDtcbmA7XG5cbmNvbnN0IExvY2FsZUJ1dHRvbiA9IHN0eWxlZChTdHlsZWREcm9wZG93bkJ1dHRvbilgXG4gICR7YnV0dG9ucy5idXR0b259O1xuICAke2J1dHRvbnMubWVkaXVtfTtcbiAgY29sb3I6ICR7Y29sb3JzLmNvbnRyb2xMYWJlbH07XG4gIGJhY2tncm91bmQ6ICR7Y29sb3JzLnRleHRGaWVsZEJvcmRlcn07XG4gIGhlaWdodDogMTAwJTtcblxuICAmOmFmdGVyIHtcbiAgICB0b3A6IDExcHg7XG4gIH1cbmA7XG5cbmNvbnN0IExvY2FsZUJ1dHRvbldyYXBwZXIgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuYDtcblxuY29uc3QgU3R5bGVkRHJvcGRvd24gPSBzdHlsZWQoRHJvcGRvd24pYFxuICB3aWR0aDogbWF4LWNvbnRlbnQ7XG4gIG1hcmdpbi10b3A6IDIwcHg7XG4gIG1hcmdpbi1ib3R0b206IDIwcHg7XG5gO1xuXG5mdW5jdGlvbiBMb2NhbGVEcm9wZG93bih7IGxvY2FsZXMsIHNlbGVjdGVkTG9jYWxlLCBvbkxvY2FsZUNoYW5nZSwgdCB9KSB7XG4gIHJldHVybiAoXG4gICAgPFN0eWxlZERyb3Bkb3duXG4gICAgICByZW5kZXJCdXR0b249eygpID0+IHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICA8TG9jYWxlQnV0dG9uV3JhcHBlcj5cbiAgICAgICAgICAgIDxMb2NhbGVCdXR0b24+XG4gICAgICAgICAgICAgIHt0KCdlZGl0b3IuZWRpdG9yQ29udHJvbFBhbmUuaTE4bi53cml0aW5nSW5Mb2NhbGUnLCB7XG4gICAgICAgICAgICAgICAgbG9jYWxlOiBzZWxlY3RlZExvY2FsZS50b1VwcGVyQ2FzZSgpLFxuICAgICAgICAgICAgICB9KX1cbiAgICAgICAgICAgIDwvTG9jYWxlQnV0dG9uPlxuICAgICAgICAgIDwvTG9jYWxlQnV0dG9uV3JhcHBlcj5cbiAgICAgICAgKTtcbiAgICAgIH19XG4gICAgPlxuICAgICAge2xvY2FsZXMubWFwKGwgPT4gKFxuICAgICAgICA8RHJvcGRvd25JdGVtXG4gICAgICAgICAgY3NzPXtjc3NgXG4gICAgICAgICAgICAke3RleHQuZmllbGRMYWJlbH1cbiAgICAgICAgICBgfVxuICAgICAgICAgIGtleT17bH1cbiAgICAgICAgICBsYWJlbD17bH1cbiAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBvbkxvY2FsZUNoYW5nZShsKX1cbiAgICAgICAgLz5cbiAgICAgICkpfVxuICAgIDwvU3R5bGVkRHJvcGRvd24+XG4gICk7XG59XG5cbmZ1bmN0aW9uIGdldEZpZWxkVmFsdWUoeyBmaWVsZCwgZW50cnksIGlzVHJhbnNsYXRhYmxlLCBsb2NhbGUgfSkge1xuICBpZiAoZmllbGQuZ2V0KCdtZXRhJykpIHtcbiAgICByZXR1cm4gZW50cnkuZ2V0SW4oWydtZXRhJywgZmllbGQuZ2V0KCduYW1lJyldKTtcbiAgfVxuXG4gIGlmIChpc1RyYW5zbGF0YWJsZSkge1xuICAgIGNvbnN0IGRhdGFQYXRoID0gZ2V0TG9jYWxlRGF0YVBhdGgobG9jYWxlKTtcbiAgICByZXR1cm4gZW50cnkuZ2V0SW4oWy4uLmRhdGFQYXRoLCBmaWVsZC5nZXQoJ25hbWUnKV0pO1xuICB9XG5cbiAgcmV0dXJuIGVudHJ5LmdldEluKFsnZGF0YScsIGZpZWxkLmdldCgnbmFtZScpXSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbnRyb2xQYW5lIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgc3RhdGUgPSB7XG4gICAgc2VsZWN0ZWRMb2NhbGU6IHRoaXMucHJvcHMubG9jYWxlLFxuICB9O1xuXG4gIGNvbXBvbmVudFZhbGlkYXRlID0ge307XG5cbiAgY29udHJvbFJlZihmaWVsZCwgd3JhcHBlZENvbnRyb2wpIHtcbiAgICBpZiAoIXdyYXBwZWRDb250cm9sKSByZXR1cm47XG4gICAgY29uc3QgbmFtZSA9IGZpZWxkLmdldCgnbmFtZScpO1xuXG4gICAgdGhpcy5jb21wb25lbnRWYWxpZGF0ZVtuYW1lXSA9XG4gICAgICB3cmFwcGVkQ29udHJvbC5pbm5lcldyYXBwZWRDb250cm9sPy52YWxpZGF0ZSB8fCB3cmFwcGVkQ29udHJvbC52YWxpZGF0ZTtcbiAgfVxuXG4gIGhhbmRsZUxvY2FsZUNoYW5nZSA9IHZhbCA9PiB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IHNlbGVjdGVkTG9jYWxlOiB2YWwgfSk7XG4gIH07XG5cbiAgdmFsaWRhdGUgPSBhc3luYyAoKSA9PiB7XG4gICAgdGhpcy5wcm9wcy5maWVsZHMuZm9yRWFjaChmaWVsZCA9PiB7XG4gICAgICBpZiAoZmllbGQuZ2V0KCd3aWRnZXQnKSA9PT0gJ2hpZGRlbicpIHJldHVybjtcbiAgICAgIHRoaXMuY29tcG9uZW50VmFsaWRhdGVbZmllbGQuZ2V0KCduYW1lJyldKCk7XG4gICAgfSk7XG4gIH07XG5cbiAgc3dpdGNoVG9EZWZhdWx0TG9jYWxlID0gKCkgPT4ge1xuICAgIGlmIChoYXNJMThuKHRoaXMucHJvcHMuY29sbGVjdGlvbikpIHtcbiAgICAgIGNvbnN0IHsgZGVmYXVsdExvY2FsZSB9ID0gZ2V0STE4bkluZm8odGhpcy5wcm9wcy5jb2xsZWN0aW9uKTtcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHRoaXMuc2V0U3RhdGUoeyBzZWxlY3RlZExvY2FsZTogZGVmYXVsdExvY2FsZSB9LCByZXNvbHZlKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG4gIH07XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgY29sbGVjdGlvbiwgZW50cnksIGZpZWxkc01ldGFEYXRhLCBmaWVsZHNFcnJvcnMsIG9uQ2hhbmdlLCBvblZhbGlkYXRlLCB0IH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IGZpZWxkcyA9IHRoaXMucHJvcHMuZmllbGRzO1xuXG4gICAgaWYgKCFjb2xsZWN0aW9uIHx8ICFmaWVsZHMpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGlmIChlbnRyeS5zaXplID09PSAwIHx8IGVudHJ5LmdldCgncGFydGlhbCcpID09PSB0cnVlKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBjb25zdCB7IGxvY2FsZXMsIGRlZmF1bHRMb2NhbGUgfSA9IGdldEkxOG5JbmZvKGNvbGxlY3Rpb24pO1xuICAgIGNvbnN0IGxvY2FsZSA9IHRoaXMuc3RhdGUuc2VsZWN0ZWRMb2NhbGU7XG4gICAgY29uc3QgaTE4biA9IGxvY2FsZXMgJiYge1xuICAgICAgY3VycmVudExvY2FsZTogbG9jYWxlLFxuICAgICAgbG9jYWxlcyxcbiAgICAgIGRlZmF1bHRMb2NhbGUsXG4gICAgfTtcblxuICAgIHJldHVybiAoXG4gICAgICA8Q29udHJvbFBhbmVDb250YWluZXI+XG4gICAgICAgIHtsb2NhbGVzICYmIChcbiAgICAgICAgICA8TG9jYWxlRHJvcGRvd25cbiAgICAgICAgICAgIGxvY2FsZXM9e2xvY2FsZXN9XG4gICAgICAgICAgICBzZWxlY3RlZExvY2FsZT17bG9jYWxlfVxuICAgICAgICAgICAgb25Mb2NhbGVDaGFuZ2U9e3RoaXMuaGFuZGxlTG9jYWxlQ2hhbmdlfVxuICAgICAgICAgICAgdD17dH1cbiAgICAgICAgICAvPlxuICAgICAgICApfVxuICAgICAgICB7ZmllbGRzXG4gICAgICAgICAgLmZpbHRlcihmID0+IGYuZ2V0KCd3aWRnZXQnKSAhPT0gJ2hpZGRlbicpXG4gICAgICAgICAgLm1hcCgoZmllbGQsIGkpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGlzVHJhbnNsYXRhYmxlID0gaXNGaWVsZFRyYW5zbGF0YWJsZShmaWVsZCwgbG9jYWxlLCBkZWZhdWx0TG9jYWxlKTtcbiAgICAgICAgICAgIGNvbnN0IGlzRHVwbGljYXRlID0gaXNGaWVsZER1cGxpY2F0ZShmaWVsZCwgbG9jYWxlLCBkZWZhdWx0TG9jYWxlKTtcbiAgICAgICAgICAgIGNvbnN0IGlzSGlkZGVuID0gaXNGaWVsZEhpZGRlbihmaWVsZCwgbG9jYWxlLCBkZWZhdWx0TG9jYWxlKTtcbiAgICAgICAgICAgIGNvbnN0IGtleSA9IGkxOG4gPyBgJHtsb2NhbGV9XyR7aX1gIDogaTtcblxuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgPEVkaXRvckNvbnRyb2xcbiAgICAgICAgICAgICAgICBrZXk9e2tleX1cbiAgICAgICAgICAgICAgICBmaWVsZD17ZmllbGR9XG4gICAgICAgICAgICAgICAgdmFsdWU9e2dldEZpZWxkVmFsdWUoe1xuICAgICAgICAgICAgICAgICAgZmllbGQsXG4gICAgICAgICAgICAgICAgICBlbnRyeSxcbiAgICAgICAgICAgICAgICAgIGxvY2FsZSxcbiAgICAgICAgICAgICAgICAgIGlzVHJhbnNsYXRhYmxlLFxuICAgICAgICAgICAgICAgIH0pfVxuICAgICAgICAgICAgICAgIGZpZWxkc01ldGFEYXRhPXtmaWVsZHNNZXRhRGF0YX1cbiAgICAgICAgICAgICAgICBmaWVsZHNFcnJvcnM9e2ZpZWxkc0Vycm9yc31cbiAgICAgICAgICAgICAgICBvbkNoYW5nZT17KGZpZWxkLCBuZXdWYWx1ZSwgbmV3TWV0YWRhdGEpID0+XG4gICAgICAgICAgICAgICAgICBvbkNoYW5nZShmaWVsZCwgbmV3VmFsdWUsIG5ld01ldGFkYXRhLCBpMThuKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBvblZhbGlkYXRlPXtvblZhbGlkYXRlfVxuICAgICAgICAgICAgICAgIHByb2Nlc3NDb250cm9sUmVmPXt0aGlzLmNvbnRyb2xSZWYuYmluZCh0aGlzKX1cbiAgICAgICAgICAgICAgICBjb250cm9sUmVmPXt0aGlzLmNvbnRyb2xSZWZ9XG4gICAgICAgICAgICAgICAgZW50cnk9e2VudHJ5fVxuICAgICAgICAgICAgICAgIGNvbGxlY3Rpb249e2NvbGxlY3Rpb259XG4gICAgICAgICAgICAgICAgaXNEaXNhYmxlZD17aXNEdXBsaWNhdGV9XG4gICAgICAgICAgICAgICAgaXNIaWRkZW49e2lzSGlkZGVufVxuICAgICAgICAgICAgICAgIGlzRmllbGREdXBsaWNhdGU9e2ZpZWxkID0+IGlzRmllbGREdXBsaWNhdGUoZmllbGQsIGxvY2FsZSwgZGVmYXVsdExvY2FsZSl9XG4gICAgICAgICAgICAgICAgaXNGaWVsZEhpZGRlbj17ZmllbGQgPT4gaXNGaWVsZEhpZGRlbihmaWVsZCwgbG9jYWxlLCBkZWZhdWx0TG9jYWxlKX1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSl9XG4gICAgICA8L0NvbnRyb2xQYW5lQ29udGFpbmVyPlxuICAgICk7XG4gIH1cbn1cblxuQ29udHJvbFBhbmUucHJvcFR5cGVzID0ge1xuICBjb2xsZWN0aW9uOiBJbW11dGFibGVQcm9wVHlwZXMubWFwLmlzUmVxdWlyZWQsXG4gIGVudHJ5OiBJbW11dGFibGVQcm9wVHlwZXMubWFwLmlzUmVxdWlyZWQsXG4gIGZpZWxkczogSW1tdXRhYmxlUHJvcFR5cGVzLmxpc3QuaXNSZXF1aXJlZCxcbiAgZmllbGRzTWV0YURhdGE6IEltbXV0YWJsZVByb3BUeXBlcy5tYXAuaXNSZXF1aXJlZCxcbiAgZmllbGRzRXJyb3JzOiBJbW11dGFibGVQcm9wVHlwZXMubWFwLmlzUmVxdWlyZWQsXG4gIG9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBvblZhbGlkYXRlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxufTtcbiJdfQ== */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const LocaleButton = ( /*#__PURE__*/0, _styledBase.default)(_netlifyCmsUiDefault.StyledDropdownButton, {
  target: "e1tnasa21",
  label: "LocaleButton"
})(_netlifyCmsUiDefault.buttons.button, ";", _netlifyCmsUiDefault.buttons.medium, ";color:", _netlifyCmsUiDefault.colors.controlLabel, ";background:", _netlifyCmsUiDefault.colors.textFieldBorder, ";height:100%;&:after{top:11px;}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const LocaleButtonWrapper = (0, _styledBase.default)("div", {
  target: "e1tnasa22",
  label: "LocaleButtonWrapper"
})(process.env.NODE_ENV === "production" ? {
  name: "k008qs",
  styles: "display:flex;"
} : {
  name: "k008qs",
  styles: "display:flex;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const StyledDropdown = ( /*#__PURE__*/0, _styledBase.default)(_netlifyCmsUiDefault.Dropdown, {
  target: "e1tnasa23",
  label: "StyledDropdown"
})(process.env.NODE_ENV === "production" ? {
  name: "1k4ct7",
  styles: "width:max-content;margin-top:20px;margin-bottom:20px;"
} : {
  name: "1k4ct7",
  styles: "width:max-content;margin-top:20px;margin-bottom:20px;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});

function LocaleDropdown({
  locales,
  selectedLocale,
  onLocaleChange,
  t
}) {
  return (0, _core.jsx)(StyledDropdown, {
    renderButton: () => {
      return (0, _core.jsx)(LocaleButtonWrapper, null, (0, _core.jsx)(LocaleButton, null, t('editor.editorControlPane.i18n.writingInLocale', {
        locale: selectedLocale.toUpperCase()
      })));
    }
  }, locales.map(l => (0, _core.jsx)(_netlifyCmsUiDefault.DropdownItem, {
    css: /*#__PURE__*/(0, _core.css)(_netlifyCmsUiDefault.text.fieldLabel, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),
    key: l,
    label: l,
    onClick: () => onLocaleChange(l)
  })));
}

function getFieldValue({
  field,
  entry,
  isTranslatable,
  locale
}) {
  if (field.get('meta')) {
    return entry.getIn(['meta', field.get('name')]);
  }

  if (isTranslatable) {
    const dataPath = (0, _i18n.getLocaleDataPath)(locale);
    return entry.getIn([...dataPath, field.get('name')]);
  }

  return entry.getIn(['data', field.get('name')]);
}

class ControlPane extends _react.default.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      selectedLocale: this.props.locale
    });

    _defineProperty(this, "componentValidate", {});

    _defineProperty(this, "handleLocaleChange", val => {
      this.setState({
        selectedLocale: val
      });
    });

    _defineProperty(this, "validate", async () => {
      this.props.fields.forEach(field => {
        if (field.get('widget') === 'hidden') return;
        this.componentValidate[field.get('name')]();
      });
    });

    _defineProperty(this, "switchToDefaultLocale", () => {
      if ((0, _i18n.hasI18n)(this.props.collection)) {
        const {
          defaultLocale
        } = (0, _i18n.getI18nInfo)(this.props.collection);
        return new Promise(resolve => this.setState({
          selectedLocale: defaultLocale
        }, resolve));
      } else {
        return Promise.resolve();
      }
    });
  }

  controlRef(field, wrappedControl) {
    var _wrappedControl$inner;

    if (!wrappedControl) return;
    const name = field.get('name');
    this.componentValidate[name] = ((_wrappedControl$inner = wrappedControl.innerWrappedControl) === null || _wrappedControl$inner === void 0 ? void 0 : _wrappedControl$inner.validate) || wrappedControl.validate;
  }

  render() {
    const {
      collection,
      entry,
      fieldsMetaData,
      fieldsErrors,
      onChange,
      onValidate,
      t
    } = this.props;
    const fields = this.props.fields;

    if (!collection || !fields) {
      return null;
    }

    if (entry.size === 0 || entry.get('partial') === true) {
      return null;
    }

    const {
      locales,
      defaultLocale
    } = (0, _i18n.getI18nInfo)(collection);
    const locale = this.state.selectedLocale;
    const i18n = locales && {
      currentLocale: locale,
      locales,
      defaultLocale
    };
    return (0, _core.jsx)(ControlPaneContainer, null, locales && (0, _core.jsx)(LocaleDropdown, {
      locales: locales,
      selectedLocale: locale,
      onLocaleChange: this.handleLocaleChange,
      t: t
    }), fields.filter(f => f.get('widget') !== 'hidden').map((field, i) => {
      const isTranslatable = (0, _i18n.isFieldTranslatable)(field, locale, defaultLocale);
      const isDuplicate = (0, _i18n.isFieldDuplicate)(field, locale, defaultLocale);
      const isHidden = (0, _i18n.isFieldHidden)(field, locale, defaultLocale);
      const key = i18n ? `${locale}_${i}` : i;
      return (0, _core.jsx)(_EditorControl.default, {
        key: key,
        field: field,
        value: getFieldValue({
          field,
          entry,
          locale,
          isTranslatable
        }),
        fieldsMetaData: fieldsMetaData,
        fieldsErrors: fieldsErrors,
        onChange: (field, newValue, newMetadata) => onChange(field, newValue, newMetadata, i18n),
        onValidate: onValidate,
        processControlRef: this.controlRef.bind(this),
        controlRef: this.controlRef,
        entry: entry,
        collection: collection,
        isDisabled: isDuplicate,
        isHidden: isHidden,
        isFieldDuplicate: field => (0, _i18n.isFieldDuplicate)(field, locale, defaultLocale),
        isFieldHidden: field => (0, _i18n.isFieldHidden)(field, locale, defaultLocale)
      });
    }));
  }

}

exports.default = ControlPane;
ControlPane.propTypes = {
  collection: _reactImmutableProptypes.default.map.isRequired,
  entry: _reactImmutableProptypes.default.map.isRequired,
  fields: _reactImmutableProptypes.default.list.isRequired,
  fieldsMetaData: _reactImmutableProptypes.default.map.isRequired,
  fieldsErrors: _reactImmutableProptypes.default.map.isRequired,
  onChange: _propTypes.default.func.isRequired,
  onValidate: _propTypes.default.func.isRequired
};