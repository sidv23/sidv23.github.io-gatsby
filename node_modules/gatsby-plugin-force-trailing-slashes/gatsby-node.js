"use strict";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var replacePath = function replacePath(_path) {
  return _path === "/" ? _path : _path.replace(/\/$|$/, "/");
};

var defaultOptions = {
  excludedPaths: ["/404.html"]
};

exports.onCreatePage = function (_ref, pluginOptions) {
  var page = _ref.page,
      actions = _ref.actions;
  var createPage = actions.createPage,
      deletePage = actions.deletePage;

  var options = _objectSpread(_objectSpread({}, defaultOptions), pluginOptions);

  return new Promise(function (resolve) {
    if (!options.excludedPaths.includes(page.path)) {
      var oldPage = Object.assign({}, page);
      page.path = replacePath(page.path);

      if (page.path !== oldPage.path) {
        deletePage(oldPage);
        createPage(page);
      }
    }

    resolve();
  });
};